<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.neu.hoso.model.CommonlyUsedDrugsMapper" >
  <resultMap id="BaseResultMap" type="edu.neu.hoso.model.CommonlyUsedDrugs" >
    <constructor >
      <idArg column="Commonly_Used_Drugs" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Doctor_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Drugs_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    Commonly_Used_Drugs, Doctor_ID, Drugs_ID
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="edu.neu.hoso.example.CommonlyUsedDrugsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from commonly_used_drugs
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="edu.neu.hoso.example.CommonlyUsedDrugsExample" >
    delete from commonly_used_drugs
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="edu.neu.hoso.model.CommonlyUsedDrugs" >
    insert into commonly_used_drugs
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="commonlyUsedDrugs != null" >
        Commonly_Used_Drugs,
      </if>
      <if test="doctorId != null" >
        Doctor_ID,
      </if>
      <if test="drugsId != null" >
        Drugs_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="commonlyUsedDrugs != null" >
        #{commonlyUsedDrugs,jdbcType=INTEGER},
      </if>
      <if test="doctorId != null" >
        #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="drugsId != null" >
        #{drugsId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="edu.neu.hoso.example.CommonlyUsedDrugsExample" resultType="java.lang.Integer" >
    select count(*) from commonly_used_drugs
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update commonly_used_drugs
    <set >
      <if test="record.commonlyUsedDrugs != null" >
        Commonly_Used_Drugs = #{record.commonlyUsedDrugs,jdbcType=INTEGER},
      </if>
      <if test="record.doctorId != null" >
        Doctor_ID = #{record.doctorId,jdbcType=INTEGER},
      </if>
      <if test="record.drugsId != null" >
        Drugs_ID = #{record.drugsId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update commonly_used_drugs
    set Commonly_Used_Drugs = #{record.commonlyUsedDrugs,jdbcType=INTEGER},
      Doctor_ID = #{record.doctorId,jdbcType=INTEGER},
      Drugs_ID = #{record.drugsId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="edu.neu.hoso.model.CommonlyUsedDrugs" >
    update commonly_used_drugs
    <set >
      <if test="doctorId != null" >
        Doctor_ID = #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="drugsId != null" >
        Drugs_ID = #{drugsId,jdbcType=INTEGER},
      </if>
    </set>
    where Commonly_Used_Drugs = #{commonlyUsedDrugs,jdbcType=INTEGER}
  </update>
</mapper>