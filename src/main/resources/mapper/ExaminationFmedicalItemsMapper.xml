<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.neu.hoso.model.ExaminationFmedicalItemsMapper" >
  <resultMap id="BaseResultMap" type="edu.neu.hoso.model.ExaminationFmedicalItems" >
    <constructor >
      <idArg column="Examination_Fmedical_Items_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Examination_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Fmedical_Items_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Doctor_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Registration_Status" jdbcType="CHAR" javaType="java.lang.String" />
      <arg column="Purpose_Requirements" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="Quantity" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Actual_Quantity" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Examination_Result_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Expense_Items_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Valid_Status" jdbcType="CHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    Examination_Fmedical_Items_ID, Examination_ID, Fmedical_Items_ID, Doctor_ID, Registration_Status, 
    Purpose_Requirements, Quantity, Actual_Quantity, Examination_Result_ID, Expense_Items_ID, 
    Valid_Status
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="edu.neu.hoso.example.ExaminationFmedicalItemsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from examination_fmedical_items
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="edu.neu.hoso.example.ExaminationFmedicalItemsExample" >
    delete from examination_fmedical_items
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="edu.neu.hoso.model.ExaminationFmedicalItems" >
    <selectKey resultType="java.lang.Integer" keyProperty="examinationFmedicalItemsId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into examination_fmedical_items
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="examinationId != null" >
        Examination_ID,
      </if>
      <if test="fmedicalItemsId != null" >
        Fmedical_Items_ID,
      </if>
      <if test="doctorId != null" >
        Doctor_ID,
      </if>
      <if test="registrationStatus != null" >
        Registration_Status,
      </if>
      <if test="purposeRequirements != null" >
        Purpose_Requirements,
      </if>
      <if test="quantity != null" >
        Quantity,
      </if>
      <if test="actualQuantity != null" >
        Actual_Quantity,
      </if>
      <if test="examinationResultId != null" >
        Examination_Result_ID,
      </if>
      <if test="expenseItemsId != null" >
        Expense_Items_ID,
      </if>
      <if test="validStatus != null" >
        Valid_Status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="examinationId != null" >
        #{examinationId,jdbcType=INTEGER},
      </if>
      <if test="fmedicalItemsId != null" >
        #{fmedicalItemsId,jdbcType=INTEGER},
      </if>
      <if test="doctorId != null" >
        #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="registrationStatus != null" >
        #{registrationStatus,jdbcType=CHAR},
      </if>
      <if test="purposeRequirements != null" >
        #{purposeRequirements,jdbcType=VARCHAR},
      </if>
      <if test="quantity != null" >
        #{quantity,jdbcType=INTEGER},
      </if>
      <if test="actualQuantity != null" >
        #{actualQuantity,jdbcType=INTEGER},
      </if>
      <if test="examinationResultId != null" >
        #{examinationResultId,jdbcType=INTEGER},
      </if>
      <if test="expenseItemsId != null" >
        #{expenseItemsId,jdbcType=INTEGER},
      </if>
      <if test="validStatus != null" >
        #{validStatus,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="edu.neu.hoso.example.ExaminationFmedicalItemsExample" resultType="java.lang.Integer" >
    select count(*) from examination_fmedical_items
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update examination_fmedical_items
    <set >
      <if test="record.examinationFmedicalItemsId != null" >
        Examination_Fmedical_Items_ID = #{record.examinationFmedicalItemsId,jdbcType=INTEGER},
      </if>
      <if test="record.examinationId != null" >
        Examination_ID = #{record.examinationId,jdbcType=INTEGER},
      </if>
      <if test="record.fmedicalItemsId != null" >
        Fmedical_Items_ID = #{record.fmedicalItemsId,jdbcType=INTEGER},
      </if>
      <if test="record.doctorId != null" >
        Doctor_ID = #{record.doctorId,jdbcType=INTEGER},
      </if>
      <if test="record.registrationStatus != null" >
        Registration_Status = #{record.registrationStatus,jdbcType=CHAR},
      </if>
      <if test="record.purposeRequirements != null" >
        Purpose_Requirements = #{record.purposeRequirements,jdbcType=VARCHAR},
      </if>
      <if test="record.quantity != null" >
        Quantity = #{record.quantity,jdbcType=INTEGER},
      </if>
      <if test="record.actualQuantity != null" >
        Actual_Quantity = #{record.actualQuantity,jdbcType=INTEGER},
      </if>
      <if test="record.examinationResultId != null" >
        Examination_Result_ID = #{record.examinationResultId,jdbcType=INTEGER},
      </if>
      <if test="record.expenseItemsId != null" >
        Expense_Items_ID = #{record.expenseItemsId,jdbcType=INTEGER},
      </if>
      <if test="record.validStatus != null" >
        Valid_Status = #{record.validStatus,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update examination_fmedical_items
    set Examination_Fmedical_Items_ID = #{record.examinationFmedicalItemsId,jdbcType=INTEGER},
      Examination_ID = #{record.examinationId,jdbcType=INTEGER},
      Fmedical_Items_ID = #{record.fmedicalItemsId,jdbcType=INTEGER},
      Doctor_ID = #{record.doctorId,jdbcType=INTEGER},
      Registration_Status = #{record.registrationStatus,jdbcType=CHAR},
      Purpose_Requirements = #{record.purposeRequirements,jdbcType=VARCHAR},
      Quantity = #{record.quantity,jdbcType=INTEGER},
      Actual_Quantity = #{record.actualQuantity,jdbcType=INTEGER},
      Examination_Result_ID = #{record.examinationResultId,jdbcType=INTEGER},
      Expense_Items_ID = #{record.expenseItemsId,jdbcType=INTEGER},
      Valid_Status = #{record.validStatus,jdbcType=CHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="edu.neu.hoso.model.ExaminationFmedicalItems" >
    update examination_fmedical_items
    <set >
      <if test="examinationId != null" >
        Examination_ID = #{examinationId,jdbcType=INTEGER},
      </if>
      <if test="fmedicalItemsId != null" >
        Fmedical_Items_ID = #{fmedicalItemsId,jdbcType=INTEGER},
      </if>
      <if test="doctorId != null" >
        Doctor_ID = #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="registrationStatus != null" >
        Registration_Status = #{registrationStatus,jdbcType=CHAR},
      </if>
      <if test="purposeRequirements != null" >
        Purpose_Requirements = #{purposeRequirements,jdbcType=VARCHAR},
      </if>
      <if test="quantity != null" >
        Quantity = #{quantity,jdbcType=INTEGER},
      </if>
      <if test="actualQuantity != null" >
        Actual_Quantity = #{actualQuantity,jdbcType=INTEGER},
      </if>
      <if test="examinationResultId != null" >
        Examination_Result_ID = #{examinationResultId,jdbcType=INTEGER},
      </if>
      <if test="expenseItemsId != null" >
        Expense_Items_ID = #{expenseItemsId,jdbcType=INTEGER},
      </if>
      <if test="validStatus != null" >
        Valid_Status = #{validStatus,jdbcType=CHAR},
      </if>
    </set>
    where Examination_Fmedical_Items_ID = #{examinationFmedicalItemsId,jdbcType=INTEGER}
  </update>
</mapper>