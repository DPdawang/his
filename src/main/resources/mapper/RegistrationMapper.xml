<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.neu.hoso.model.RegistrationMapper" >
  <resultMap id="BaseResultMap" type="edu.neu.hoso.model.Registration" >
    <constructor >
      <idArg column="Registration_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Medical_Record_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Registration_Level_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Patient_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Department_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Calculation_Type_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Doctor_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Registration_Date" jdbcType="DATE" javaType="java.util.Date" />
      <arg column="Buy_Medical_Record" jdbcType="CHAR" javaType="java.lang.String" />
      <arg column="Registration_Total_Cost" jdbcType="DOUBLE" javaType="java.lang.Double" />
      <arg column="Expense_Type_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Expense_Items_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Registration_Status" jdbcType="CHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>

  <!--  添加患者对象的ResultMap by 29-y 2019.06.16 -->
  <resultMap id="SecondResultMap" type="edu.neu.hoso.model.Registration">
    <id property="registrationId" column="Registration_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
    <result property="medicalRecordId" column="Medical_Record_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
    <result property="registrationLevelId" column="Registration_Level_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
    <result property="patientId" column="Patient_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
    <result property="departmentId" column="Department_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
    <result property="calculationTypeId" column="Calculation_Type_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
    <result property="doctorId" column="Doctor_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
    <result property="registrationDate" column="Registration_Date" jdbcType="DATE" javaType="java.util.Date" />
    <result property="buyMedicalRecord" column="Buy_Medical_Record" jdbcType="CHAR" javaType="java.lang.String" />
    <result property="registrationTotalCost" column="Registration_Total_Cost" jdbcType="DOUBLE" javaType="java.lang.Double" />
    <result property="registrationTotalCost" column="Registration_Total_Cost" jdbcType="DOUBLE" javaType="java.lang.Double" />
    <result property="expenseTypeId" column="Expense_Type_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
    <result property="expenseItemsId" column="Expense_Items_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
    <result property="registrationStatus" column="Registration_Status" jdbcType="CHAR" javaType="java.lang.String" />
    <association property="patient" javaType="edu.neu.hoso.model.Patient" resultMap="edu.neu.hoso.model.PatientMapper.BaseResultMap"/>
  </resultMap>

  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    Registration_ID, Medical_Record_ID, Registration_Level_ID, Patient_ID, Department_ID, 
    Calculation_Type_ID, Doctor_ID, Registration_Date, Buy_Medical_Record, Registration_Total_Cost, 
    Expense_Type_ID, Expense_Items_ID, Registration_Status
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="edu.neu.hoso.example.RegistrationExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from registration
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="edu.neu.hoso.example.RegistrationExample" >
    delete from registration
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="edu.neu.hoso.model.Registration" >
    <selectKey resultType="java.lang.Integer" keyProperty="registrationId" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into registration
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="medicalRecordId != null" >
        Medical_Record_ID,
      </if>
      <if test="registrationLevelId != null" >
        Registration_Level_ID,
      </if>
      <if test="patientId != null" >
        Patient_ID,
      </if>
      <if test="departmentId != null" >
        Department_ID,
      </if>
      <if test="calculationTypeId != null" >
        Calculation_Type_ID,
      </if>
      <if test="doctorId != null" >
        Doctor_ID,
      </if>
      <if test="registrationDate != null" >
        Registration_Date,
      </if>
      <if test="buyMedicalRecord != null" >
        Buy_Medical_Record,
      </if>
      <if test="registrationTotalCost != null" >
        Registration_Total_Cost,
      </if>
      <if test="expenseTypeId != null" >
        Expense_Type_ID,
      </if>
      <if test="expenseItemsId != null" >
        Expense_Items_ID,
      </if>
      <if test="registrationStatus != null" >
        Registration_Status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="medicalRecordId != null" >
        #{medicalRecordId,jdbcType=INTEGER},
      </if>
      <if test="registrationLevelId != null" >
        #{registrationLevelId,jdbcType=INTEGER},
      </if>
      <if test="patientId != null" >
        #{patientId,jdbcType=INTEGER},
      </if>
      <if test="departmentId != null" >
        #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="calculationTypeId != null" >
        #{calculationTypeId,jdbcType=INTEGER},
      </if>
      <if test="doctorId != null" >
        #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="registrationDate != null" >
        #{registrationDate,jdbcType=DATE},
      </if>
      <if test="buyMedicalRecord != null" >
        #{buyMedicalRecord,jdbcType=CHAR},
      </if>
      <if test="registrationTotalCost != null" >
        #{registrationTotalCost,jdbcType=DOUBLE},
      </if>
      <if test="expenseTypeId != null" >
        #{expenseTypeId,jdbcType=INTEGER},
      </if>
      <if test="expenseItemsId != null" >
        #{expenseItemsId,jdbcType=INTEGER},
      </if>
      <if test="registrationStatus != null" >
        #{registrationStatus,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="edu.neu.hoso.example.RegistrationExample" resultType="java.lang.Integer" >
    select count(*) from registration
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update registration
    <set >
      <if test="record.registrationId != null" >
        Registration_ID = #{record.registrationId,jdbcType=INTEGER},
      </if>
      <if test="record.medicalRecordId != null" >
        Medical_Record_ID = #{record.medicalRecordId,jdbcType=INTEGER},
      </if>
      <if test="record.registrationLevelId != null" >
        Registration_Level_ID = #{record.registrationLevelId,jdbcType=INTEGER},
      </if>
      <if test="record.patientId != null" >
        Patient_ID = #{record.patientId,jdbcType=INTEGER},
      </if>
      <if test="record.departmentId != null" >
        Department_ID = #{record.departmentId,jdbcType=INTEGER},
      </if>
      <if test="record.calculationTypeId != null" >
        Calculation_Type_ID = #{record.calculationTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.doctorId != null" >
        Doctor_ID = #{record.doctorId,jdbcType=INTEGER},
      </if>
      <if test="record.registrationDate != null" >
        Registration_Date = #{record.registrationDate,jdbcType=DATE},
      </if>
      <if test="record.buyMedicalRecord != null" >
        Buy_Medical_Record = #{record.buyMedicalRecord,jdbcType=CHAR},
      </if>
      <if test="record.registrationTotalCost != null" >
        Registration_Total_Cost = #{record.registrationTotalCost,jdbcType=DOUBLE},
      </if>
      <if test="record.expenseTypeId != null" >
        Expense_Type_ID = #{record.expenseTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.expenseItemsId != null" >
        Expense_Items_ID = #{record.expenseItemsId,jdbcType=INTEGER},
      </if>
      <if test="record.registrationStatus != null" >
        Registration_Status = #{record.registrationStatus,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update registration
    set Registration_ID = #{record.registrationId,jdbcType=INTEGER},
      Medical_Record_ID = #{record.medicalRecordId,jdbcType=INTEGER},
      Registration_Level_ID = #{record.registrationLevelId,jdbcType=INTEGER},
      Patient_ID = #{record.patientId,jdbcType=INTEGER},
      Department_ID = #{record.departmentId,jdbcType=INTEGER},
      Calculation_Type_ID = #{record.calculationTypeId,jdbcType=INTEGER},
      Doctor_ID = #{record.doctorId,jdbcType=INTEGER},
      Registration_Date = #{record.registrationDate,jdbcType=DATE},
      Buy_Medical_Record = #{record.buyMedicalRecord,jdbcType=CHAR},
      Registration_Total_Cost = #{record.registrationTotalCost,jdbcType=DOUBLE},
      Expense_Type_ID = #{record.expenseTypeId,jdbcType=INTEGER},
      Expense_Items_ID = #{record.expenseItemsId,jdbcType=INTEGER},
      Registration_Status = #{record.registrationStatus,jdbcType=CHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="edu.neu.hoso.model.Registration" >
    update registration
    <set >
      <if test="medicalRecordId != null" >
        Medical_Record_ID = #{medicalRecordId,jdbcType=INTEGER},
      </if>
      <if test="registrationLevelId != null" >
        Registration_Level_ID = #{registrationLevelId,jdbcType=INTEGER},
      </if>
      <if test="patientId != null" >
        Patient_ID = #{patientId,jdbcType=INTEGER},
      </if>
      <if test="departmentId != null" >
        Department_ID = #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="calculationTypeId != null" >
        Calculation_Type_ID = #{calculationTypeId,jdbcType=INTEGER},
      </if>
      <if test="doctorId != null" >
        Doctor_ID = #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="registrationDate != null" >
        Registration_Date = #{registrationDate,jdbcType=DATE},
      </if>
      <if test="buyMedicalRecord != null" >
        Buy_Medical_Record = #{buyMedicalRecord,jdbcType=CHAR},
      </if>
      <if test="registrationTotalCost != null" >
        Registration_Total_Cost = #{registrationTotalCost,jdbcType=DOUBLE},
      </if>
      <if test="expenseTypeId != null" >
        Expense_Type_ID = #{expenseTypeId,jdbcType=INTEGER},
      </if>
      <if test="expenseItemsId != null" >
        Expense_Items_ID = #{expenseItemsId,jdbcType=INTEGER},
      </if>
      <if test="registrationStatus != null" >
        Registration_Status = #{registrationStatus,jdbcType=CHAR},
      </if>
    </set>
    where Registration_ID = #{registrationId,jdbcType=INTEGER}
  </update>

  <!--挂号结果集 @Mike 2019.6.18-->
  <resultMap id="RegistrationResultMap" type="edu.neu.hoso.model.Registration">
    <id column="Registration_ID" property="registrationId" />
    <result column="Registration_Date" property="registrationDate" />
    <result column="Buy_Medical_Record" property="buyMedicalRecord" />
    <result column="Registration_Total_Cost" property="registrationTotalCost" />
    <result column="Registration_Status" property="registrationStatus" />
    <association javaType="MedicalRecord" property="medicalRecord">
      <id column="Medical_Record_ID" property="medicalRecordId" />
      <result column="Is_Treament_Over" property="isTreamentOver" />
    </association>
    <association javaType="RegistrationLevel" property="registrationLevel">
      <id column="Registration_Level_ID" property="registrationLevelId" />
      <result column="Registration_Level_Name" property="registrationLevelName" />
    </association>
    <association javaType="Patient" property="patient">
      <id column="Patient_ID" property="patientId" />
      <result column="Patient_Name" property="patientName" />
      <result column="Patient_Gender" property="patientGender" />
      <result column="Patient_Age" property="patientAge" />
      <result column="Patient_IDentity" property="patientIdentity" />
    </association>
    <association javaType="Department" property="department">
      <id column="Department_ID" property="departmentId" />
      <result column="Department_Code" property="departmentCode" />
      <result column="Department_Name" property="departmentName" />
    </association>
    <association javaType="CalculationType" property="calculationType">
      <id column="Calculation_Type_ID" property="calculationTypeId" />
      <result column="Calculation_Type_Name" property="calculationTypeName" />
    </association>
    <association javaType="User" property="doctor">
      <id column="Doctor_ID" property="userId" />
      <result column="Doctor_Name" property="userName" />
      <association javaType="ConstantItems" property="constantItems">
        <id column="Doctor_Title_Id" property="constantItemsId" />
        <result column="Doctor_Title_Name" property="constantItemsName" />
      </association>
    </association>
    <association javaType="ExpenseType" property="expenseType">
      <id column="Expense_Type_ID" property="expenseTypeId" />
      <result column="Expense_Type_Name" property="expenseTypeName" />
    </association>
    <association javaType="ExpenseItems" property="expenseItems">
      <id column="Expense_Items_ID" property="expenseItemsId" />
      <result column="Total_Cost" property="totalCost" />
    </association>
  </resultMap>

  <!--查询挂号信息 @Mike 2019.6.18-->
  <select id="getRegistrationByMedicalRecordId" parameterType="java.lang.Integer" resultMap="RegistrationResultMap">
    SELECT
        Patient_Name,
        Patient_Gender,
        Patient_IDentity,
        Patient_Age,
        Registration_Status,
        Registration_Level_Name,
        Department_Name,
        Calculation_Type_Name,
        User_Name as Doctor_Name,
        Constant_Items_Name as Doctor_Title_Name,
        Registration_Date,
        Buy_Medical_Record,
        Total_Cost
    FROM
        registration
        JOIN medical_record ON registration.Medical_Record_ID = medical_record.Medical_Record_ID
        NATURAL JOIN patient
        NATURAL JOIN registration_level
        NATURAL JOIN department
        NATURAL JOIN calculation_type
        JOIN `user` ON registration.Doctor_ID = `user`.User_ID
        JOIN constant_items ON `user`.User_Title_ID = constant_items.Constant_Items_ID
        JOIN expense_items ON registration.Medical_Record_ID = expense_items.Medical_Record_ID
    WHERE
        registration.Medical_Record_ID = #{medicalRecordId}
        AND Registration_Status = 1
        AND medical_record.Is_Treament_Over = 1
  </select>

  <!--展示挂号列表 @Mike 2019.6.18-->
  <select id="getRegistration" parameterType="java.lang.Integer" resultMap="RegistrationResultMap">
    SELECT
        Patient_Name,
        Patient_Gender,
        Patient_IDentity,
        Patient_Age,
        Registration_Status,
        Registration_Level_Name,
        Department_Name,
        Calculation_Type_Name,
        User_Name as Doctor_Name,
        Constant_Items_Name as Doctor_Title_Name,
        Registration_Date,
        Buy_Medical_Record,
        Total_Cost
    FROM
        registration
        JOIN medical_record ON registration.Medical_Record_ID = medical_record.Medical_Record_ID
        NATURAL JOIN patient
        NATURAL JOIN registration_level
        NATURAL JOIN department
        NATURAL JOIN calculation_type
        JOIN `user` ON registration.Doctor_ID = `user`.User_ID
        JOIN constant_items ON `user`.User_Title_ID = constant_items.Constant_Items_ID
        JOIN expense_items ON registration.Medical_Record_ID = expense_items.Medical_Record_ID
    WHERE
        Registration_Status = 1
        AND medical_record.Is_Treament_Over = 1
  </select>
</mapper>