<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.neu.hoso.model.RegistrationMapper" >
  <resultMap id="BaseResultMap" type="edu.neu.hoso.model.Registration" >
    <constructor >
      <idArg column="Registration_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Medical_Record_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Registration_Level_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Patient_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Department_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Calculation_Type_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Doctor_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Registration_Date" jdbcType="DATE" javaType="java.util.Date" />
      <arg column="Buy_Medical_Record" jdbcType="CHAR" javaType="java.lang.String" />
      <arg column="Registration_Total_Cost" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="Expense_Type_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Expense_Items_ID" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="Registration_Status" jdbcType="CHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    Registration_ID, Medical_Record_ID, Registration_Level_ID, Patient_ID, Department_ID, 
    Calculation_Type_ID, Doctor_ID, Registration_Date, Buy_Medical_Record, Registration_Total_Cost, 
    Expense_Type_ID, Expense_Items_ID, Registration_Status
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="edu.neu.hoso.example.RegistrationExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from registration
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="edu.neu.hoso.example.RegistrationExample" >
    delete from registration
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="edu.neu.hoso.model.Registration" >
    <selectKey resultType="java.lang.Integer" keyProperty="registrationId" order="BEFORE" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into registration
    <trim prefix="(" suffix=")" suffixOverrides="," >
      Registration_ID,
      <if test="medicalRecordId != null" >
        Medical_Record_ID,
      </if>
      <if test="registrationLevelId != null" >
        Registration_Level_ID,
      </if>
      <if test="patientId != null" >
        Patient_ID,
      </if>
      <if test="departmentId != null" >
        Department_ID,
      </if>
      <if test="calculationTypeId != null" >
        Calculation_Type_ID,
      </if>
      <if test="doctorId != null" >
        Doctor_ID,
      </if>
      <if test="registrationDate != null" >
        Registration_Date,
      </if>
      <if test="buyMedicalRecord != null" >
        Buy_Medical_Record,
      </if>
      <if test="registrationTotalCost != null" >
        Registration_Total_Cost,
      </if>
      <if test="expenseTypeId != null" >
        Expense_Type_ID,
      </if>
      <if test="expenseItemsId != null" >
        Expense_Items_ID,
      </if>
      <if test="registrationStatus != null" >
        Registration_Status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{registrationId,jdbcType=INTEGER},
      <if test="medicalRecordId != null" >
        #{medicalRecordId,jdbcType=INTEGER},
      </if>
      <if test="registrationLevelId != null" >
        #{registrationLevelId,jdbcType=INTEGER},
      </if>
      <if test="patientId != null" >
        #{patientId,jdbcType=INTEGER},
      </if>
      <if test="departmentId != null" >
        #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="calculationTypeId != null" >
        #{calculationTypeId,jdbcType=INTEGER},
      </if>
      <if test="doctorId != null" >
        #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="registrationDate != null" >
        #{registrationDate,jdbcType=DATE},
      </if>
      <if test="buyMedicalRecord != null" >
        #{buyMedicalRecord,jdbcType=CHAR},
      </if>
      <if test="registrationTotalCost != null" >
        #{registrationTotalCost,jdbcType=DECIMAL},
      </if>
      <if test="expenseTypeId != null" >
        #{expenseTypeId,jdbcType=INTEGER},
      </if>
      <if test="expenseItemsId != null" >
        #{expenseItemsId,jdbcType=INTEGER},
      </if>
      <if test="registrationStatus != null" >
        #{registrationStatus,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="edu.neu.hoso.example.RegistrationExample" resultType="java.lang.Integer" >
    select count(*) from registration
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update registration
    <set >
      <if test="record.registrationId != null" >
        Registration_ID = #{record.registrationId,jdbcType=INTEGER},
      </if>
      <if test="record.medicalRecordId != null" >
        Medical_Record_ID = #{record.medicalRecordId,jdbcType=INTEGER},
      </if>
      <if test="record.registrationLevelId != null" >
        Registration_Level_ID = #{record.registrationLevelId,jdbcType=INTEGER},
      </if>
      <if test="record.patientId != null" >
        Patient_ID = #{record.patientId,jdbcType=INTEGER},
      </if>
      <if test="record.departmentId != null" >
        Department_ID = #{record.departmentId,jdbcType=INTEGER},
      </if>
      <if test="record.calculationTypeId != null" >
        Calculation_Type_ID = #{record.calculationTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.doctorId != null" >
        Doctor_ID = #{record.doctorId,jdbcType=INTEGER},
      </if>
      <if test="record.registrationDate != null" >
        Registration_Date = #{record.registrationDate,jdbcType=DATE},
      </if>
      <if test="record.buyMedicalRecord != null" >
        Buy_Medical_Record = #{record.buyMedicalRecord,jdbcType=CHAR},
      </if>
      <if test="record.registrationTotalCost != null" >
        Registration_Total_Cost = #{record.registrationTotalCost,jdbcType=DECIMAL},
      </if>
      <if test="record.expenseTypeId != null" >
        Expense_Type_ID = #{record.expenseTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.expenseItemsId != null" >
        Expense_Items_ID = #{record.expenseItemsId,jdbcType=INTEGER},
      </if>
      <if test="record.registrationStatus != null" >
        Registration_Status = #{record.registrationStatus,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update registration
    set Registration_ID = #{record.registrationId,jdbcType=INTEGER},
      Medical_Record_ID = #{record.medicalRecordId,jdbcType=INTEGER},
      Registration_Level_ID = #{record.registrationLevelId,jdbcType=INTEGER},
      Patient_ID = #{record.patientId,jdbcType=INTEGER},
      Department_ID = #{record.departmentId,jdbcType=INTEGER},
      Calculation_Type_ID = #{record.calculationTypeId,jdbcType=INTEGER},
      Doctor_ID = #{record.doctorId,jdbcType=INTEGER},
      Registration_Date = #{record.registrationDate,jdbcType=DATE},
      Buy_Medical_Record = #{record.buyMedicalRecord,jdbcType=CHAR},
      Registration_Total_Cost = #{record.registrationTotalCost,jdbcType=DECIMAL},
      Expense_Type_ID = #{record.expenseTypeId,jdbcType=INTEGER},
      Expense_Items_ID = #{record.expenseItemsId,jdbcType=INTEGER},
      Registration_Status = #{record.registrationStatus,jdbcType=CHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="edu.neu.hoso.model.Registration" >
    update registration
    <set >
      <if test="medicalRecordId != null" >
        Medical_Record_ID = #{medicalRecordId,jdbcType=INTEGER},
      </if>
      <if test="registrationLevelId != null" >
        Registration_Level_ID = #{registrationLevelId,jdbcType=INTEGER},
      </if>
      <if test="patientId != null" >
        Patient_ID = #{patientId,jdbcType=INTEGER},
      </if>
      <if test="departmentId != null" >
        Department_ID = #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="calculationTypeId != null" >
        Calculation_Type_ID = #{calculationTypeId,jdbcType=INTEGER},
      </if>
      <if test="doctorId != null" >
        Doctor_ID = #{doctorId,jdbcType=INTEGER},
      </if>
      <if test="registrationDate != null" >
        Registration_Date = #{registrationDate,jdbcType=DATE},
      </if>
      <if test="buyMedicalRecord != null" >
        Buy_Medical_Record = #{buyMedicalRecord,jdbcType=CHAR},
      </if>
      <if test="registrationTotalCost != null" >
        Registration_Total_Cost = #{registrationTotalCost,jdbcType=DECIMAL},
      </if>
      <if test="expenseTypeId != null" >
        Expense_Type_ID = #{expenseTypeId,jdbcType=INTEGER},
      </if>
      <if test="expenseItemsId != null" >
        Expense_Items_ID = #{expenseItemsId,jdbcType=INTEGER},
      </if>
      <if test="registrationStatus != null" >
        Registration_Status = #{registrationStatus,jdbcType=CHAR},
      </if>
    </set>
    where Registration_ID = #{registrationId,jdbcType=INTEGER}
  </update>
</mapper>